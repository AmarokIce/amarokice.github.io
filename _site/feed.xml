<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>狼与凤梨田</title>
    <description>Hope you&apos;re happy!</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 09 Jan 2025 22:38:42 +0800</pubDate>
    <lastBuildDate>Thu, 09 Jan 2025 22:38:42 +0800</lastBuildDate>
    <generator>Jekyll v4.3.4</generator>
    
      <item>
        <title>高效率的生产力</title>
        <description>&lt;h1 id=&quot;引子&quot;&gt;引子&lt;/h1&gt;
&lt;p&gt;有很多人在向我委托事情的时候，通常会犯下一个很大的问题：问“在吗”。我知道，其实也有一些人意识到这是一个很浪费时间的问题，而且也很忌讳有人向自己提出这样的问题。&lt;/p&gt;

&lt;p&gt;但事实上，我们的生活中依然有很多相同的问题，这些问题正在浪费我们的时间。因此我决定先把一些显而易见的问题提出，同时我也能自审有犯下这些问题的可能性。&lt;/p&gt;

&lt;p&gt;当遇到自己无法解决的问题的时候，想其他人委托是正常的情况。但是合适的提问方式才能有效的提高沟通的效率。&lt;/p&gt;

&lt;h1 id=&quot;停止问在吗&quot;&gt;停止问“在吗”&lt;/h1&gt;
&lt;p&gt;就像引言中提到的，这很浪费时间。如果你有一个问题，你可以清楚的描述你的问题，直接说出你的需求以及你目前的解决方案，亦或是如果你很着急解决，你可以提供一个限定期。&lt;/p&gt;

&lt;p&gt;如果是长期合作者，可以用一些更好的问法来取代“在吗”。当然，我说的不是把“在吗”变成“现在方便吗”或者“你好？”这种一样没有意义的话语。就像是使用“现在有时间吗”来代替“现在有时间来和我进行一次私人会议吗”，或是“现在有空去帮我做一下xxx吗”这样直接描述问题。&lt;/p&gt;

&lt;h1 id=&quot;清楚的描述&quot;&gt;清楚的描述&lt;/h1&gt;
&lt;p&gt;不能好好的描述问题真的很令狼反感。需要一遍一遍的去确认，去沟通，效率相当低下。有时候一些复杂的问题还得不断的提交文档与资料，时间就是这样无意义的被浪费掉的。&lt;/p&gt;

&lt;p&gt;就像是曾经我接受过一些邮件委托，但实际上委托人并没有看邮件的习惯。导致我们沟通周期非常长。而对方也完全做不到清楚的描述问题，每次都提供一点模糊的，棱模两可的描述，导致我们周旋了三天时间。这真的令狼烦恼。&lt;/p&gt;

&lt;p&gt;另外，提问时应该注意不要过分描述问题，提供一些对方根本用不到的信息。比如中午吃了什么，项目开发了多久（这没意义，除了用来吐槽项目太烂了）。&lt;/p&gt;

&lt;h1 id=&quot;避免使用邮件取代实时联络&quot;&gt;避免使用邮件取代实时联络&lt;/h1&gt;
&lt;p&gt;我真的得说，现在很少人会认真的编写与关注邮件。一封邮件的内容与主旨可能相当少，这些内容完全可以通过视频电话或当面谈论来解决。但对于那些新研发的空构项目，应该在邮件中系统的描述细节，而不是棱模两可的，就像是在平时聊天一样的去描述它们。这样的环境下邮件会逐步失去它的含金量，大量的邮件需要不断的整理会变的浪费时间。或许你曾经听过有人告诉你就应该多用邮件沟通，那么我想他也一定不是指什么事都应该用邮件沟通。如果是的话，那么他也一样太不懂得如何节约自己的时间了。&lt;/p&gt;

&lt;p&gt;就像上面我说的，如果委托人并没有经常看邮件的习惯，会导致沟通效率变得低下。&lt;/p&gt;

&lt;h1 id=&quot;不要畏惧迎难而上&quot;&gt;不要畏惧，迎难而上&lt;/h1&gt;
&lt;p&gt;你还在害怕做一些事情吗？好吧，我知道这很困难，就像是我这样的内向的狼参与面试。虽然我现在依然觉得面试相当困难，除非坐在我对面的是一位设计师，现在在职位的设计师，否则我会感觉不自然。但我知道，一直逃避并不是一个好的解决方案，因此我现在正在尝试做点什么，去克服它。&lt;/p&gt;

&lt;p&gt;如果一直逃避问题，问题也不会自己解决自己。尝试自我暗示，告诉自己其实自己可以做到的，去尝试一些，一切都会变好。&lt;/p&gt;

&lt;h1 id=&quot;保持放松&quot;&gt;保持放松&lt;/h1&gt;
&lt;p&gt;很多人都忽视了这一点，尤其是经历过现代教育的人，时常忽视了自己的基本需求，为了达到目的不择手段。但是放松也是工作的重要组成部分，就像是我无法在没有咖啡与燕麦提子曲奇的办公室里执行工作。一旦我开始工作，我会感觉饥饿。如果有人觉得我是为了逃避工作——那就大错特错了。如果我真的想去逃避，我会去认真的吃饭。但如果我想保持一边工作一边解决问题，咖啡与高饱腹感的燕麦曲奇是我的好搭档。保持身心愉悦能够提高工作效率。&lt;/p&gt;
</description>
        <pubDate>Sun, 08 Dec 2024 15:44:00 +0800</pubDate>
        <link>http://localhost:4000/%E5%92%A9%E7%8B%BC%E5%8D%9A%E5%AE%A2/%E4%BB%A5%E7%8B%BC%E8%A7%82%E4%B8%96/2024/12/08/%E9%AB%98%E6%95%88%E7%8E%87%E7%9A%84%E7%94%9F%E4%BA%A7%E5%8A%9B.html</link>
        <guid isPermaLink="true">http://localhost:4000/%E5%92%A9%E7%8B%BC%E5%8D%9A%E5%AE%A2/%E4%BB%A5%E7%8B%BC%E8%A7%82%E4%B8%96/2024/12/08/%E9%AB%98%E6%95%88%E7%8E%87%E7%9A%84%E7%94%9F%E4%BA%A7%E5%8A%9B.html</guid>
        
        <category>博客</category>
        
        <category>哲学</category>
        
        
        <category>咩狼博客</category>
        
        <category>以狼观世</category>
        
      </item>
    
      <item>
        <title>DLang 在 Windows 控制台中输出乱码的解决方案</title>
        <description>&lt;p&gt;因为 Windows 的控制台默认并不是 UTF-8, 但 DLang 强调使用 UTF-8 格式作为文件编码, 同时我们很大程度上并不希望使用 UTF-8 以外的编码，因此我们需要修改控制台编码。&lt;/p&gt;

&lt;p&gt;修改自身操作系统一劳永途的方法很多，网上都能找到，这里只讲嵌入代码中的解决方案方便适配到任何地方。&lt;/p&gt;

&lt;p&gt;首先要知道的是在 DLang 中想要导入 Windows 包, 应该是从 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;core.sys&lt;/code&gt; 下寻找 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;core.sys.windows.windows&lt;/code&gt;。&lt;/p&gt;

&lt;div class=&quot;language-d highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;core&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;windows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;windows&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SetConsoleOutputCP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CP_UTF8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;SetConsoleOutputCP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CP_UTF8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;writeln&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;你好世界！&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Thu, 21 Nov 2024 10:00:00 +0800</pubDate>
        <link>http://localhost:4000/%E5%92%A9%E7%8B%BC%E5%8D%9A%E5%AE%A2/%E6%8A%98%E8%85%BE/2024/11/21/Dlang%E5%9C%A8Windows%E8%BE%93%E5%87%BA%E4%B8%BA%E4%B9%B1%E7%A0%81%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88.html</link>
        <guid isPermaLink="true">http://localhost:4000/%E5%92%A9%E7%8B%BC%E5%8D%9A%E5%AE%A2/%E6%8A%98%E8%85%BE/2024/11/21/Dlang%E5%9C%A8Windows%E8%BE%93%E5%87%BA%E4%B8%BA%E4%B9%B1%E7%A0%81%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88.html</guid>
        
        <category>DLang</category>
        
        <category>技术</category>
        
        
        <category>咩狼博客</category>
        
        <category>折腾</category>
        
      </item>
    
      <item>
        <title>为何选择 DLang</title>
        <description>&lt;h2 id=&quot;碎碎念&quot;&gt;碎碎念&lt;/h2&gt;
&lt;p&gt;当被问起为何选择 DLang,亦或是其他人想知道 DLang 为什么做的比 C++ 更好(虽然它还不够完完全全的取代 C++,它不是一个 C++ 的分支, Coal 才是),是时候总结一篇文章了。&lt;/p&gt;

&lt;h2 id=&quot;入门&quot;&gt;入门&lt;/h2&gt;
&lt;h3 id=&quot;哲学与能力&quot;&gt;哲学与能力&lt;/h3&gt;
&lt;p&gt;DLang 的设计哲学便是保持开发。DLang 注重最小最轻的标准库,保证里面只有一切你会用到的东西,而不会有其他无关的东西。DLang 保持关心最核心的问题。&lt;/p&gt;

&lt;p&gt;DLang 拥有自己的垃圾标记与垃圾回收器（GC）。通过 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@nogc&lt;/code&gt; 注解来禁用 GC 的工作,之后需要手动回收。&lt;/p&gt;

&lt;p&gt;DLang 允许安全编程，远离肮脏的不安全指针。&lt;/p&gt;

&lt;p&gt;DLang 拥有强大的与 C/C++ 的兼任能力,同时拥有自己的开放源代码标准库 STD,初学阶段我们会在顶部导入包 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;std.stdio&lt;/code&gt;。这个包已经导入了你在 C 中会涉及到的库 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;stdio.h&lt;/code&gt;。&lt;/p&gt;

&lt;h3 id=&quot;快速上爪&quot;&gt;快速上爪&lt;/h3&gt;
&lt;p&gt;DLang 拥有相当平滑的入门曲线,因为它适应多种语言开发者。只可惜暂时没有较为知名的 DLang 华语论坛。&lt;/p&gt;

&lt;p&gt;我们先看一段例子:&lt;/p&gt;

&lt;div class=&quot;language-d highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// 让我们看起来像是从 C 语言迁移过来的!&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%s&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello world!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 让我们以 D 语言的风格编写程序!&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;writef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%s&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hello world!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;


&lt;span class=&quot;c1&quot;&gt;// 让我们看起来是从 Java 迁移过来的!&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;writeln&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello world!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;DLang 的编译器分为三种,官方标配的 DMD, 基于 GCC 的编译器 GDC,亦或是基于 LLVM 的编译器 LDC。&lt;/p&gt;

&lt;p&gt;在 Windows 端,我们通常推荐使用 DMD 或 LDC,而 Unix 终端可自便。&lt;/p&gt;

&lt;h3 id=&quot;其他特性&quot;&gt;其他特性&lt;/h3&gt;
&lt;p&gt;依照官网描述,DLang 依然有很多强大且会用到的特性。在此我会更直观的描述 DLang 的强大之处：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;高等级的抽象建模（泛型,模板与委托）；&lt;/li&gt;
  &lt;li&gt;高性能的快速编译语言；&lt;/li&gt;
  &lt;li&gt;静态编程语言；&lt;/li&gt;
  &lt;li&gt;系统级 API 与嵌入式编程；&lt;/li&gt;
  &lt;li&gt;安全子集（Safe D）；&lt;/li&gt;
  &lt;li&gt;易理解,可维护的代码；&lt;/li&gt;
  &lt;li&gt;兼容 C 语言的二进制接口（相关文档见官网）；&lt;/li&gt;
  &lt;li&gt;有限兼容 C++ 的二进制接口（相关改动见 D 1.0 迁移至 2.0）；&lt;/li&gt;
  &lt;li&gt;多范式编程（甚至汇编！）,且拥有平滑学习曲线；&lt;/li&gt;
  &lt;li&gt;契约除错与内置的单元测试。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;更多你会感兴趣的&quot;&gt;更多你会感兴趣的&lt;/h3&gt;
&lt;p&gt;我之前提到过 DLang 是我在完成 PineappleScript 这个大饼之前用作系统维护的语言。是的,DLang 甚至适合作为脚本程序！让我们看一看运行指令：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;编译：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dmd [filename]&lt;/code&gt;&lt;/p&gt;

  &lt;p&gt;执行（不输出编译产物）：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rdmd [filename]&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;DLang 的包管理器是 DUB。使用 DUB 执行一定会产生编译产物。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;DUB 构建编译：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dub build&lt;/code&gt;&lt;/p&gt;

  &lt;p&gt;DUB 构建执行：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dub run&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;对于 Unix,在首行放置 Shebang（ #!/bin/sh 等)可以直接作为脚本执行程序。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;强大的导入模块&quot;&gt;强大的导入模块&lt;/h2&gt;
&lt;h3 id=&quot;随意导入&quot;&gt;随意导入&lt;/h3&gt;
&lt;p&gt;你的下一个 import, 何必要写在头部？ DLang 允许你在 &lt;strong&gt;任何地方&lt;/strong&gt; import 一个新的模块，甚至只抽取部分函数进行导入。&lt;/p&gt;

&lt;div class=&quot;language-d highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdio&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;writeln&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 在函数内导入的模块的作用域仅限于当前函数。此处单独导入了 writeln 函数作用给 main 函数！&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;writeln&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello world!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;公开匹配&quot;&gt;公开匹配&lt;/h3&gt;
&lt;p&gt;在 DLang 中，对 import 进行公开（&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;public import ...&lt;/code&gt;) 会让导入当前模块的地方同时能够自动导入被公开的部分。因此 public 时一定要注意当前模块与导入模块的关系是否合适。&lt;/p&gt;

&lt;p&gt;但是我们依然有一种常见场景——目录导入。&lt;/p&gt;

&lt;p&gt;DLang 中约定，直接导入模块目录可以导入全部内容。而 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;package.d&lt;/code&gt; 可以管理模块是否需要公开（这是可选的，我们通常是这样约定的）。&lt;/p&gt;

&lt;div class=&quot;language-d highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// package.d&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;apps&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;apps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;app1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;apps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;app2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;apps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;app3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在直接导入 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;app.apps&lt;/code&gt; 时，将会自动导入其余三个文件。当如，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;package.d&lt;/code&gt; 中也是可以写代码的。当你不关心模块时可以这么做。&lt;/p&gt;

&lt;h2 id=&quot;安全编程&quot;&gt;安全编程&lt;/h2&gt;
&lt;p&gt;远古代码总是像是粪坑，人们都知道最下面有金子，但是人们望而却步。因为粪坑的顶部是不安全的分配和对指针的运算，甚至是越界访问。DLang 决定开创一个西方极乐世界，若是开发者的心中有一片净土，那么未来一定能前往极乐世界的。&lt;/p&gt;

&lt;p&gt;DLang 中的代码安全等级分为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;system&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;trusted&lt;/code&gt; 与 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;safe&lt;/code&gt;。任何代码默认都为系统级（&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;system&lt;/code&gt;)。&lt;/p&gt;

&lt;p&gt;来看一段代码：&lt;/p&gt;

&lt;div class=&quot;language-d highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@safe&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Error&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;main 函数被标记了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@safe&lt;/code&gt;，那么它就是安全的。来看第一段：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;int* a = new int;&lt;/code&gt; 这一段中我们为 a 分配了一块内存，分配者是 GC。分配后会返回内存托管的指针。当指针不再使用，GC 会立刻出动。再来看第二段：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;int* b = a + 5; // Error&lt;/code&gt; 我在注释中写了 Error,因为这一段是不成立的。看起来没什么问题？不，安全编程中不可以做这种不干不净的事情。如果你想要内存，那么你得自己去拿，规矩你是知道的。&lt;/p&gt;

&lt;p&gt;安全的函数只能调用另一个安全的函数，除非那个函数是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@trusted&lt;/code&gt; 的。当有这个标记，那么编译器会默认这段函数的安全性由开发者管理，也就是所谓的 Unsafe 编程。&lt;/p&gt;

&lt;h2 id=&quot;拓展阅读&quot;&gt;拓展阅读&lt;/h2&gt;
&lt;p&gt;觉得 DLang 如何？想要深入了解吗？这里有一些好的选择：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://dlang.org/&quot;&gt;访问 DLang 官方网站&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://tour.dlang.org/&quot;&gt;访问 DLang 官方教学&lt;/a&gt; (&lt;a href=&quot;https://tour.dlang.org/tour/zh/welcome/welcome-to-d&quot;&gt;中文站&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dlang-community/awesome-d&quot;&gt;阅读 Awesome D&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://ddili.org/ders/d.en/index.html&quot;&gt;阅读 Programming in D&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/stars/AmarokIce/lists/here-we-are-dlang&quot;&gt;跟踪我的收藏栏 Here we are, DLang!&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://wolf.snowlyicewolf.club/posts/dlang_with_vscode/&quot;&gt;从 VSCode 开始编写你得第一个 DLang 程序&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://wolf.snowlyicewolf.club/&quot;&gt;保持关注我的博客！&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Tue, 12 Nov 2024 10:00:00 +0800</pubDate>
        <link>http://localhost:4000/%E5%92%A9%E7%8B%BC%E5%8D%9A%E5%AE%A2/%E6%8A%98%E8%85%BE/2024/11/12/%E4%B8%BA%E4%BD%95%E9%80%89%E6%8B%A9D.html</link>
        <guid isPermaLink="true">http://localhost:4000/%E5%92%A9%E7%8B%BC%E5%8D%9A%E5%AE%A2/%E6%8A%98%E8%85%BE/2024/11/12/%E4%B8%BA%E4%BD%95%E9%80%89%E6%8B%A9D.html</guid>
        
        <category>DLang</category>
        
        <category>技术</category>
        
        
        <category>咩狼博客</category>
        
        <category>折腾</category>
        
      </item>
    
      <item>
        <title>DLang对象与继承关系</title>
        <description>&lt;p&gt;不知道为什么，Bing 和 Google 上都没有 DLang 中类似 Java 的 instanceof 的用法说明。看了一天 Objects in D Prograssing Language 文档之后一无所获。最后我相信读代码应该能解决问题。当然，这个问题解决了，否则就没有这篇文章了。&lt;/p&gt;

&lt;p&gt;首先我们依然需要知道一个概念：DLang 与任何面向对象语言一样，都有一个集中对象，就像 Java 与 Ruby 中是 Object，Kotlin 中是 Any。DLang 中使用的也是 Object（Class）。任何类与接口都是 Object 的派生类。而对象操作的集合则是一个单独的包，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;object&lt;/code&gt;。&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;object&lt;/code&gt; 不在 std 之中，而 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;object&lt;/code&gt; 默认被任何类继承，因此直接使用内部函数即可。&lt;/p&gt;

&lt;h2 id=&quot;简单对比is-与-objecttypeid---typeinfo&quot;&gt;简单对比：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;is&lt;/code&gt; 与 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;object#typeid() -&amp;gt; TypeInfo&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;is&lt;/code&gt; 关键字用于比较对象身份。在 DLang 中，如果你想知道对象是否为 null，不可以直接使用比较运算 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a == null&lt;/code&gt;，而是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a is null&lt;/code&gt;。
同样的，当我们想要检查身份时，也可以使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;is&lt;/code&gt; .&lt;/p&gt;

&lt;div class=&quot;language-d highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;：&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clazzA&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clazzB&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;infoA&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;typeid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clazzA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;infoB&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;typeid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clazzB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;writeln&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// True, 因为对象都是 A 的实例&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;writeln&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// False, a 是 A 的实例而 b 是 B 的实例，这与继承关系无关。&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;object&lt;/code&gt; 包下存在一种函数：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;typeid&lt;/code&gt;。这个函数可以用于获取类与对象的基本数据，诸如名称等。自身的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;toString()&lt;/code&gt; 函数指向类或接口的完全名称（从 module 到 ClassName，就像 Java 的完全名称是从包名到 ClassName).使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;typeid&lt;/code&gt; 可以直接比较对象类型而忽视细节。&lt;/p&gt;

&lt;div class=&quot;language-d highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;：&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clazzA&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clazzB&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clazzA2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;infoA&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;typeid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clazzA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;infoB&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;typeid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clazzB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;infoA2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;typeid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clazzA2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;writeln&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;infoA&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;infoA2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// True, 因为对象都是 A 的实例&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;writeln&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;infoA&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clazzB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// False, 虽然 B 继承自 A，但是 A 与 B 的 TypeInfo 并不相同&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;对象一致性验证tohash-与-equalsopequals&quot;&gt;对象一致性验证：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;toHash&lt;/code&gt; 与 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;equals&lt;/code&gt;/&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;opEquals&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;toHash&lt;/code&gt;&lt;/strong&gt; 似乎没有什么可以讲的，因为还是我们熟悉的那些东西。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;equals&lt;/code&gt;&lt;/strong&gt; 是类对比独有函数，用于检查实例是否相同。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;opEquals&lt;/code&gt;&lt;/strong&gt; 是对象默认实现的函数，基于对象身份进行检查，默认使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;is&lt;/code&gt; 检查其身份。&lt;/p&gt;

&lt;h2 id=&quot;继承关系typeinfo_classinterfaces-与-typeinfo_classisbaseoftypeinfo_class---bool&quot;&gt;继承关系：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TypeInfo_Class#interfaces&lt;/code&gt; 与 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TypeInfo_Class#isBaseOf(TypeInfo_Class) -&amp;gt; bool&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;最有意思的部分，这一部分貌似不在文档之中，但是它们就是我们想要的。或许是因为 Java 写多了导致的，在写 DLang 的面向对象的时候总是觉得自己在写反射。&lt;/p&gt;

&lt;p&gt;小知识：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ClassInfo&lt;/code&gt; 是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TypeInfo_Class&lt;/code&gt; 的别名(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;alias&lt;/code&gt;)。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;interfaces&lt;/code&gt; 是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ClassInfo&lt;/code&gt; 下的一个字段，类型是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Interface[]&lt;/code&gt;。没错，这个字段装载着当前对象的类继承的全部接口。但是需要注意，这个仅限于当前类 &lt;strong&gt;直接继承&lt;/strong&gt; 的接口。换言之，如果是继承了某个类或抽象类，父类携带的接口是不会被传入的。如果想要检查父类的接口，需要取得父类的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ClassInfo&lt;/code&gt;。访问 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ClassInfo&lt;/code&gt; 下的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;base&lt;/code&gt; 字段即可。&lt;/p&gt;

&lt;p&gt;虽然 DLang 没有 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;instanceof&lt;/code&gt; 这样的关键字，但是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ClassInfo&lt;/code&gt; 实现了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;isBaseOf&lt;/code&gt; 函数。就当反射吧，它用于检查传入的类是否为当前类的子类。注意，传入的是类，是指 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ClassInfo&lt;/code&gt;，不可以传入对象。&lt;/p&gt;

&lt;div class=&quot;language-d highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FOO&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FOO&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;


&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;writeln&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;instanceof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FOO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;classinfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;      &lt;span class=&quot;c1&quot;&gt;// True, 对象 b 的类数据 B 继承自接口 FOO。&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;writeln&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;instanceof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;classinfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;// True, 对象 b 的类数据 B 继承自对象 a 的类数据 A。&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;writeln&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;instanceof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;classinfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;      &lt;span class=&quot;c1&quot;&gt;// True，理所当然，b 的父类的类数据 A 与对象 a 的类数据 A 是一样的&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;writeln&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;instanceof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;classinfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;// False，关系颠倒&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instanceof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ClassInfo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clazz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 检查函数在这里&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clazz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isBaseOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;classinfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Mon, 11 Nov 2024 17:21:00 +0800</pubDate>
        <link>http://localhost:4000/%E5%92%A9%E7%8B%BC%E5%8D%9A%E5%AE%A2/%E6%8A%98%E8%85%BE/2024/11/11/Dlang%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB.html</link>
        <guid isPermaLink="true">http://localhost:4000/%E5%92%A9%E7%8B%BC%E5%8D%9A%E5%AE%A2/%E6%8A%98%E8%85%BE/2024/11/11/Dlang%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB.html</guid>
        
        <category>DLang</category>
        
        <category>技术</category>
        
        
        <category>咩狼博客</category>
        
        <category>折腾</category>
        
      </item>
    
      <item>
        <title>DLang多线程之spawn</title>
        <description>&lt;h1 id=&quot;碎碎念&quot;&gt;碎碎念&lt;/h1&gt;
&lt;p&gt;最近正在研究使用 DLang 编写一些实用小工具，在 PineappleScript 成型之前都得靠 DLang 作为日用维护系统的脚本了。&lt;/p&gt;

&lt;p&gt;但很显然，我很快就遇到了并发需求项目，经过一番折腾并表达了对 Jvm 语言的思乡之情之后最终解决了这个问题，就记录一下喽。&lt;/p&gt;

&lt;h1 id=&quot;关于-dlang-并发&quot;&gt;关于 DLang 并发&lt;/h1&gt;
&lt;p&gt;DLang 有对多线程与协程的支持，DLang 的协程其实相当好理解，但多线程就有意思了。在 DLang 中，静态是强调绝对本地化的，也就是静态函数中使用的内容必须是编译时可见（参数除外）。而多线程的时候通常也是强调这一点，因此推荐使用静态函数作为并发函数，本文也会使用静态函数作为示例。&lt;/p&gt;

&lt;p&gt;DLang 中的并发分为并行迭代（&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;parallelism&lt;/code&gt;，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;parallel&lt;/code&gt;，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;map&amp;amp;amap&lt;/code&gt;），委托（&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;task&lt;/code&gt;）以及信道通讯（&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;spawn&lt;/code&gt;）。这些并发方法均具有委托性质。本文主要针对通常会被使用的信道通讯（Message Passing Concurrency）进行演示。&lt;/p&gt;

&lt;h1 id=&quot;概念&quot;&gt;概念&lt;/h1&gt;
&lt;p&gt;不要着急看代码，至少先有个概念。最最少你也得知道，&lt;strong&gt;编写并发需要导入包 std.concurrency 。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;信道通讯将会分为一个总线（主线程）和若干子线（并发线程）。通过函数 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;spawn&lt;/code&gt; 进行委托。委托后返回线程标识符 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Tid&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Tid&lt;/code&gt; 的拓展函数 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;send&lt;/code&gt; 可以传送任意数据到目标线程。线程中可以通过 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;thisTid&lt;/code&gt; 获取当前的线程标识符，在子线程中也可以使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ownerTid&lt;/code&gt; 获取主线程的标识符，用于传递消息。&lt;/p&gt;

&lt;p&gt;首先先看一个简单的并发例子：&lt;/p&gt;

&lt;div class=&quot;language-d highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;concurrency&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;threadFunction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;varString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;writeln&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;varString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;spawn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;threadFunction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hello world from sub-thread!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;writeln&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello world from main thread&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;随后将会看到我们期望的两段话。理所当然，不是咩？&lt;/p&gt;

&lt;p&gt;很好，那么让我们再看看讯息传递的例子：&lt;/p&gt;

&lt;div class=&quot;language-d highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;concurrency&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;threadFunction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;receive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;writeln&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Tid&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tid&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;spawn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;threadFunction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;tid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello world!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;由于 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;while&lt;/code&gt; 的条件是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;true&lt;/code&gt;，这一段程序不会自己退出。不过别着急强制杀死，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Thread.sleep&lt;/code&gt; 这个喜闻乐见的用于延长业务运行周期迫使用户交钱来获取最快速度的顶级函数的效果之后就可以看到我们的 “Hello world!” 了。&lt;/p&gt;

&lt;p&gt;但需要注意，&lt;strong&gt;并发时不可以传入指针&lt;/strong&gt;，指正指向的地址是本地的变量，而跨线程访问会有安全隐患，因此 DLang 会直接拒绝编译传入&lt;strong&gt;非原子&lt;/strong&gt;指针。此处必须存在原子操作才可安全传入指针。&lt;/p&gt;
</description>
        <pubDate>Mon, 04 Nov 2024 23:21:00 +0800</pubDate>
        <link>http://localhost:4000/%E5%92%A9%E7%8B%BC%E5%8D%9A%E5%AE%A2/%E6%8A%98%E8%85%BE/2024/11/04/Dlang%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B9%8Bspawn.html</link>
        <guid isPermaLink="true">http://localhost:4000/%E5%92%A9%E7%8B%BC%E5%8D%9A%E5%AE%A2/%E6%8A%98%E8%85%BE/2024/11/04/Dlang%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B9%8Bspawn.html</guid>
        
        <category>DLang</category>
        
        <category>技术</category>
        
        
        <category>咩狼博客</category>
        
        <category>折腾</category>
        
      </item>
    
      <item>
        <title>DLang+VSCode 快速上爪指北</title>
        <description>&lt;p&gt;D 语言一直是一门不温不火但又相当优雅，集成了 C++， Java，C# 与 Python 的语言特性，获取它们的优点，解决了很多编程时的痛苦之处。&lt;/p&gt;

&lt;p&gt;但也正因为它的不温不火，导致它的第三方库大多年久失修，官方文档上也有一些 VSCode 开发方面没有讲清的地方。再折腾了一天之后我决定记录成一篇文章。&lt;/p&gt;

&lt;p&gt;首先按照官方文档为 VSCode 安装插件 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;D Programming Language (code-d)&lt;/code&gt; 。&lt;/p&gt;

&lt;p&gt;如果你从未安装过 D 语言，那么在安装这个插件之后应该会自动跳转到 DMD 下载界面。如果什么也没有发生，你可以手动过去。&lt;a href=&quot;https://dlang.org/download.html&quot;&gt;点我前往&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;不知道下载哪个？如果你是一个新手，不愿意折腾 GCC 一类的 C 语言社区环境，那么使用 DMD 是极佳的。&lt;/p&gt;

&lt;p&gt;随后，找个好地方。然后打开你的终端（或 cmd），输入 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dub init&lt;/code&gt;(或者 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dub init 你的项目名称&lt;/code&gt;, 尽量不要大写/中文字符) 进行项目初始化。你可以全部回车，直到向导结束。现在，使用 VSCode 打开项目。&lt;/p&gt;

&lt;p&gt;为你的 VSCode 配置 code-d 与 server-d。当然，如果你不在乎它们的位置，那就让 VSCode 的插件自己下载就好，你需要做的就是去泡一杯咖啡然后等它自己编译。&lt;/p&gt;

&lt;p&gt;一切都很好。现在，我们进入 Debugging 选项卡（如果你不知道是什么，Ctrl Shift D 进入），选择创建 launch.json，选择创建 DuB Debugging。&lt;/p&gt;

&lt;p&gt;现在，你的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;./.vscode/launch.json&lt;/code&gt; 的内容看起来应该是这样：&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;version&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;0.2.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;configurations&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;code-d&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;request&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;launch&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;dubBuild&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Build &amp;amp; Debug DUB project&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;cwd&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;${command:dubWorkingDirectory}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;program&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;${command:dubTarget}&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;如果你找不到，可能是因为你已经打开了 .d 文件。保持选项卡中没有文件被打开，然后再试一次。&lt;/p&gt;

&lt;p&gt;接下来我们配置 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tasks.json&lt;/code&gt;。可以手动创建或使用 VSCode 的指令创建。然后复制下面的内容黏贴过去：&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;version&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2.0.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;tasks&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;label&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;dub build&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
			&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;dub&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
			&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;run&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
			&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;compiler&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;$current&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
			&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;archType&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;$current&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
			&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;buildType&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;$current&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
			&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;configuration&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;$current&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
			&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;problemMatcher&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
				&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;$dmd&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
			&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
			&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;group&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;build&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
			&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;detail&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;dub build --compiler=C:&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;dmd2&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;windows&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;bin&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;dmd.exe -a=x86_64 -b=debug -c=application&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
		&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;注意: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;detail&lt;/code&gt; 处的 dmd.exe 路径改为你的 dmd 安装路径。&lt;/p&gt;

&lt;p&gt;接着回到 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;launch.sjon&lt;/code&gt;, 为刚配置的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;configurations&lt;/code&gt; 增加一条：&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;version&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;0.2.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;configurations&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;code-d&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;request&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;launch&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;dubBuild&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Build &amp;amp; Debug DUB project&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;preLaunchTask&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;dub build&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;cwd&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;${command:dubWorkingDirectory}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;program&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;${command:dubTarget}&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;大功告成！现在我们在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;./source/app.d&lt;/code&gt; 中写点什么：&lt;/p&gt;

&lt;div class=&quot;language-d highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;writeln&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello D World!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;现在，你可以使用 VSCode 的运行与调试来执行你的代码了！大功告成！&lt;/p&gt;
</description>
        <pubDate>Tue, 10 Sep 2024 18:30:00 +0800</pubDate>
        <link>http://localhost:4000/%E5%92%A9%E7%8B%BC%E5%8D%9A%E5%AE%A2/%E6%8A%98%E8%85%BE/2024/09/10/dlang_with_vscode.html</link>
        <guid isPermaLink="true">http://localhost:4000/%E5%92%A9%E7%8B%BC%E5%8D%9A%E5%AE%A2/%E6%8A%98%E8%85%BE/2024/09/10/dlang_with_vscode.html</guid>
        
        <category>DLang</category>
        
        
        <category>咩狼博客</category>
        
        <category>折腾</category>
        
      </item>
    
      <item>
        <title>折腾心得-黑苹果装机简要报告</title>
        <description>&lt;h1 id=&quot;折腾心得-2024年黑苹果装机简要报告&quot;&gt;[折腾心得] 2024年黑苹果装机简要报告&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;By BEclR0Ck&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;最近看到了针对 6700XT 等 Navi22 核心系列显卡的驱动支持，算是给黑果加上了根续命稻草。又回想起当时买这张卡的初衷，就决定把黑苹果捡回来了。简要分享下流程吧。&lt;/p&gt;

&lt;h2 id=&quot;配置检查&quot;&gt;配置检查&lt;/h2&gt;
&lt;p&gt;遗憾的是，近两年电脑的主流配置大部分都无法驱动，而原因出现在显卡上。intel 芯片从 11 代开始就都无法驱动核显，而独显方面，N 卡比较特殊，自从 Apple 和 Nvidia 摩擦后，能免驱的就只有比较老的开普勒架构的 N 卡了，而且只能免驱到 MacOS 11，即使是打补丁，高于 GTX1080 的 N 卡也无法驱动，而在 MacOS 12-14 下驱动 N 卡，则需要安装 Opencore legacy patcher 但也无法加速，所以有条件建议更换 A 卡。 虽然 N 卡在黑苹果下生存比较艰难，但驱动起来相对还是比较容易的。&lt;strong&gt;但如果你的电脑同时叠了 11/12/13 代 + RTX20/30/40 系的双 buff 的话，恭喜你与黑苹果无缘了。&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;u盘制作&quot;&gt;U盘制作&lt;/h2&gt;
&lt;p&gt;简单的刻录在这里就不提了。主要的问题在EFI制作上。这里要感谢 &lt;a href=&quot;https://github.com/JeoJay127&quot;&gt;@JeoJay&lt;/a&gt; 大佬开发的 &lt;a href=&quot;https://github.com/JeoJay127/RapidEFI-Tool&quot;&gt;RapidEFI&lt;/a&gt;，你可以用这个工具一键检测你的环境来生成你所需要的 EFI 文件。&lt;/p&gt;

&lt;p&gt;根据你自己的配置，轻轻点击就可以生成出你需要的 EFI 了。得到后，用 &lt;a href=&quot;https://www.diskgenius.cn/&quot;&gt;DiskGenius&lt;/a&gt; 将之前刻录好的U盘内的 EFI 文件夹删除，替换为你自己的 EFI 就可以了。&lt;/p&gt;

&lt;h2 id=&quot;分区&quot;&gt;分区&lt;/h2&gt;
&lt;p&gt;请注意，在你要安装系统的磁盘里，不能存在小于200MB的区，请在WinPE环境下，将Windows的EFI分区扩容至200MB以上，并备份你的Windows引导，避免出现macOS顶号导致Windows无法正常引导的情况比如我。&lt;/p&gt;

&lt;h2 id=&quot;安装&quot;&gt;安装&lt;/h2&gt;
&lt;p&gt;安装之前，还有些&lt;strong&gt;必要工作&lt;/strong&gt;要做。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;重启电脑，进入你的BIOS，确保以下选项的开关正确，若你的品牌BIOS中没有对应选项可忽略。&lt;/li&gt;
&lt;/ol&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Disable&lt;/th&gt;
      &lt;th&gt;关闭&lt;/th&gt;
      &lt;th&gt;Enable&lt;/th&gt;
      &lt;th&gt;开启&lt;/th&gt;
      &lt;th&gt; &lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Fast Boot&lt;/td&gt;
      &lt;td&gt;快速启动&lt;/td&gt;
      &lt;td&gt;VT-x&lt;/td&gt;
      &lt;td&gt;VT-x&lt;/td&gt;
      &lt;td&gt;虚拟化技术&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Secure Boot&lt;/td&gt;
      &lt;td&gt;安全启动&lt;/td&gt;
      &lt;td&gt;Above 4G&lt;/td&gt;
      &lt;td&gt;4G以上解码&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Serial/COM Port 	串行/COM端口&lt;/td&gt;
      &lt;td&gt;Hyper-Threading&lt;/td&gt;
      &lt;td&gt;超线程&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Parallel Port&lt;/td&gt;
      &lt;td&gt;并行端口&lt;/td&gt;
      &lt;td&gt;Execute Disable Bit&lt;/td&gt;
      &lt;td&gt;执行禁用位&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;CSM&lt;/td&gt;
      &lt;td&gt;兼容性支持模块&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Intel SGX&lt;/td&gt;
      &lt;td&gt;英特尔SGX&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Inter Platform Trust&lt;/td&gt;
      &lt;td&gt;英特尔平台信任&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;CFG Lock&lt;/td&gt;
      &lt;td&gt;CFG锁&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;更改完成后，保存这些选项，重启电脑，按下主板对应的不同按键来选择启动项，这里选择你刚刚制作好的U盘，若没有其他问题，你会看到这个画面。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;选择Install macOS+对应系统代号，我们便可进入安装界面。&lt;/li&gt;
  &lt;li&gt;选择“磁盘工具”，在里面找到我们提前为系统准备好的分区，抹掉这个分区，格式选择APFS，待操作完成后返回页面。
    &lt;blockquote class=&quot;prompt-danger&quot;&gt;
      &lt;p&gt;*假设您的磁盘是空的或者数据是已经备份过的,别怪我没提醒。&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;选择“安装macOS”，同意出现的条款，安装便开始了。中途会重启多次，重启后，请在引导界面选择macOS Installer继续安装系统，在安装期间，常会自动重启3-4遍。安装时间取决于固态硬盘的读写速度，请务必耐心等待。&lt;/li&gt;
  &lt;li&gt;安装完成后，你会看到安装向导，跟着向导一步一步走，能跳过的跳过，直到设置向导完成。这时候，桌面就出现了。&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;后期工作&quot;&gt;后期工作&lt;/h2&gt;
&lt;p&gt;系统安装后,你可以先喝杯咖啡兴奋会儿，因为很快又有新的任务要做。&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;先打开终端，输入命令： ` ` sudo spctl –master-disable # 启用macOS安装应用允许任何来源 然后会要求你输入密码，&lt;strong&gt;请注意：密码不会显示在屏幕上。&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;继续输入命令： ` ` sudo rm -rf /Library/Preferences/SystemConfiguration/NetworkInterfaces.plist ` ` sudo pmset -b hibernatemode 0 # 内存供电，内存镜像不写入硬盘 ` ` sudo pmset -b acwake 0 # 关闭被同一 iCloud 下的设备唤醒&lt;/li&gt;
  &lt;li&gt;完成这些操作后，重启，这样系统就处于一个可用状态了。&lt;/li&gt;
  &lt;li&gt;在完成上述操作后，进入WinPE，找到你的EFI分区，将你U盘内的EFI放进磁盘的EFI分区中，就大功告成了。
    &lt;blockquote class=&quot;prompt-tip&quot;&gt;
      &lt;p&gt;*目的是脱离U盘引导使用macOS。&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;完成后关机，拔掉U盘后再开机，此时的默认引导已经变成OC引导，你可以在此选择启动Windows还是macOS了。&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;后话&quot;&gt;后话&lt;/h2&gt;
&lt;p&gt;2024年可能是黑与白交替的一年，黑苹果已经慢慢步入迟暮，苹果已经逐渐停止对 Intel 架构的全面支持，未来一段时间内，可能 MacOS 将只支持 Arm 平台，随着苹果开始打通中低端市场，愿意用黑苹果的人也会越来越少，且用且珍惜吧。&lt;/p&gt;
</description>
        <pubDate>Sat, 22 Jun 2024 18:30:00 +0800</pubDate>
        <link>http://localhost:4000/%E5%9F%BA%E5%B2%A9%E5%8D%9A%E5%AE%A2/%E6%8A%80%E6%9C%AF/2024/06/22/apple_make_bedrock.html</link>
        <guid isPermaLink="true">http://localhost:4000/%E5%9F%BA%E5%B2%A9%E5%8D%9A%E5%AE%A2/%E6%8A%80%E6%9C%AF/2024/06/22/apple_make_bedrock.html</guid>
        
        <category>基岩博客</category>
        
        
        <category>基岩博客</category>
        
        <category>技术</category>
        
      </item>
    
      <item>
        <title>什么是动物保护？</title>
        <description>&lt;p&gt;很多时候我都能在各种地方发现各种对于“动物保护”有着各种理解，因此我认为我有必要澄清我对动物保护的理解与概念。
这篇文章的内容与主旨可能是受争议的，请在完全理解文章内容前不要发表任何具有争议性的短评。&lt;/p&gt;

&lt;p&gt;所谓动物保护，事实上也是一种对自然的保护，人类对于自然的付出进行的回馈，动物保护的核心主旨是被动且根源性的。而不是某些极端之人所认为的：动物保护就是素食主义。
这是完全错误的认知，照这么说，植物的命也是命，什么都不要吃了最好，自己死了还能成为自然的养料。
弱肉强食是自然法则中食物链的铁律，弱小的动物被强大的动物圈养与捕猎是自然运转的正常工作流。通常会有人曲解这一工作流，指责动物保护者“只保护猫狗等家宠，不关系鸡鸭等家禽”。
“圈养”与“增殖保护”这一长期生存的狩猎策略并不是人类的专利，大多肉食动物都有相同的意识，同样的意识对于草食动物迁移换草中也得以体现。人是杂食动物，人可以肉食偏好，也可以素食偏好，那无论人吃肉还是吃素，都是天经地义。
“这不过是为自己吃肉找借口！”这样的反馈也很常见。事实上，这样的反馈依然是在曲解自然的工作流，那么我在此放一个问题：请问，除了被动的气候之外，是谁在促进主动或被动的促使动物灭绝？
人们打着保护草食动物的名义将黄狼赶尽杀绝，又因为人类的发展活动促使南极狼表亲们消失不见。又是因为人类的工业活动促使气候不断改变，大量动物死于人类的殖民需求。这在自然中几乎不常见，只有人类才会大规模的，甚至比人类团体更大规模的，去促使自然毁灭，促使动物消失。
为什么 PRH（Pet Rescue Home， 家宠救助之家）与 SPCA（the Society for the Prevention of Cruelty to Animals，爱护动物协会）更大的去关注流浪动物？
那么再次逆推，流浪动物的“流浪”是因为什么出现的？因为人类的遗弃与虐待。流浪动物会制造什么麻烦？很多人恐怕都回答不上这个问题，除了动物发情期很烦之外。
很多老人都喜欢救助流浪动物，以喂食的方式。但是喂食不是收容，这会促使流浪动物处于一种“吃饱喝足”的状态，此时流浪动物会逐渐退化本性到“半社区化宠物”——它们有领地意识；它们知道谁是好人，谁是坏人；它们无法做出贡献，诸如捉老鼠；它们会因为好玩而袭击鸟类，即便一些鸟类早已是珍惜动物。
再者，如果经常关注 SPCA 的新闻，会了解到 SPCA 经常性的从战地带走迷失的流浪动物。因为人类的殖民需要而发起的战争，除了把无辜之人推向刀口，对动物与动物生态都是极大的威胁。&lt;/p&gt;

&lt;p&gt;归根结底，保护动物是人类亏钱于大自然的。每个人都有义务去还清这份“债务”，也应该有这种“欠债”的意识。无论做了多少，无论做了什么，积土成山，唯有大家努力，才能有一篇祥和的生存环境。记住，如果大自然毁灭了，那么人类也别想有好日子过。&lt;/p&gt;
</description>
        <pubDate>Wed, 01 May 2024 21:53:18 +0800</pubDate>
        <link>http://localhost:4000/%E5%92%A9%E7%8B%BC%E5%8D%9A%E5%AE%A2/%E4%BB%A5%E7%8B%BC%E8%A7%82%E4%B8%96/2024/05/01/what_pa.html</link>
        <guid isPermaLink="true">http://localhost:4000/%E5%92%A9%E7%8B%BC%E5%8D%9A%E5%AE%A2/%E4%BB%A5%E7%8B%BC%E8%A7%82%E4%B8%96/2024/05/01/what_pa.html</guid>
        
        <category>日常</category>
        
        <category>SPAC</category>
        
        <category>动物保护</category>
        
        
        <category>咩狼博客</category>
        
        <category>以狼观世</category>
        
      </item>
    
      <item>
        <title>Kotlin中Lambda表达式与object表达式</title>
        <description>&lt;p&gt;出于某种原因，我一时间忘记如何在 object 表达式的 λ 中使用指向父级的 this 了，因此我会记录一片文章防止我的脑子里只有凤梨。
在网上查找了很久，除了复制黏贴的文章之外什么也没找到，最后还是脑子里的凤梨全回到该到的地方才想起来怎么用。
在Kotlin中灵活使用 Lambda 表达式也是非常重要的，而Kotlin有多重集成API。
如果你不是一个 Java 的老开发者，也不太了解 Java8 发生啥事，那么你可能不知道 Lambda 是什么，或者说你经常使用，但你不知道它其实就叫 Lambda 。无论如何，这一篇解析将会透彻讲解 Kotlin 的Lambda 。如果你觉得我写的还不错，&lt;del&gt;那就让我来 λλ 你的凤梨&lt;/del&gt; 记得分享我的文章。&lt;/p&gt;

&lt;p&gt;Lambda 本质是一种匿名的代码块传递。首先我们来看一组例子：&lt;/p&gt;
&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FunnyClass&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NotFunnyClass&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;funnyFunction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;funnyVariable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;快问快答！上面四组非常有趣（或者没那么有趣）的例子中哪个是真正的Lambda——
答案是可变变量 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;funnyVariable&lt;/code&gt;！ 此处使用了一个 Lambda 将一个执行代码块传入了变量 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;funnyVariable&lt;/code&gt;。那么我们要如何使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;funnyVariable&lt;/code&gt; ？&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;funnyVariable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;o&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;funnyVariable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;如果你有一种疑问：“这和方法有什么区别？”
事实上 Lambda 的运用不止如此——而将 Lambda 传入对象也是一种精妙的设计！再来看这样的例子：&lt;/p&gt;
&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HashMap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Unit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;注意到这和一般的申明 HashMap 有什么不同吗？ 它的值不是一个标准 Object，而是一个Lambda！
那么我们现在使用这样的data HashMap：&lt;/p&gt;
&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HashMap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Unit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;()&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 传入参数只有一种时，Kotlin会静默将其申明为 it&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;514&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;dat&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;test2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 巧妙的 Lambda Let 会在文章的后面讲到！&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;114&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 因为 dada 中没有 test2 ，所以此处返回值永远都是 -1&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;这在 Java 中要如何实现？好吧，我们需要先实现一个接口来承载方法。&lt;/p&gt;

&lt;h3 id=&quot;内联方法体&quot;&gt;内联方法体&lt;/h3&gt;
&lt;p&gt;与 Java 一样，在调用 Lambda 的时候允许直接传入 Lambda 对象内联方法体，也就是使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;::Method&lt;/code&gt; 上实例：&lt;/p&gt;
&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;):&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;intMap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HashMap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;intMap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;intMap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;减少性能开销&quot;&gt;减少性能开销&lt;/h3&gt;
&lt;p&gt;Kotlin 中使用 Lambda 匿名的本质事实上也是在调用时动态创建一个匿名类作为承载体。不断的实例确实是相当耗费性能的。
此时一个新的标记登场：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;inline&lt;/code&gt;。
但事实上，我不会推荐在每个地方都打上 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;inline&lt;/code&gt; 。因为如果你预期的内连方法体中并没有新的 Lambda 函数参数，在最新的 Kotlin 中，这样的性能开销早已微不足道。
但是这篇教学依然会向你展示 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;inline&lt;/code&gt; 的标记点：&lt;/p&gt;
&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;inline&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;):&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;intMap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HashMap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;intMap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;intMap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Sun, 31 Mar 2024 11:17:14 +0800</pubDate>
        <link>http://localhost:4000/%E5%92%A9%E7%8B%BC%E5%8D%9A%E5%AE%A2/%E6%8A%98%E8%85%BE/kotlin/2024/03/31/kotlin_lambda.html</link>
        <guid isPermaLink="true">http://localhost:4000/%E5%92%A9%E7%8B%BC%E5%8D%9A%E5%AE%A2/%E6%8A%98%E8%85%BE/kotlin/2024/03/31/kotlin_lambda.html</guid>
        
        <category>技术</category>
        
        <category>Kotlin</category>
        
        
        <category>咩狼博客</category>
        
        <category>折腾</category>
        
        <category>Kotlin</category>
        
      </item>
    
      <item>
        <title>Git疑难杂症-权限令牌错误 remote-Permission to xxxxx.git denied to xxx fatal - The requested URL returned error - 403</title>
        <description>&lt;p&gt;在我将我的代码转入团队后，即便我为我的账号分配了 Admin ，我依然无法提交代码。但是奇怪的是，如果我使用令牌验证，就可以。
错报如下：&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;remote: Permission to xxxxx.git denied to xxx.

fatal: unable to access &lt;span class=&quot;s1&quot;&gt;&apos;https://github.com/xxx.git/&apos;&lt;/span&gt;: The requested URL returned error: 403
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;好嘛，难道要把团队的仓库挪回个人？Bing了很久才偶遇一个解决方案，特此记录一下。&lt;/p&gt;

&lt;p&gt;首先进入项目根目录，打开隐藏文件夹 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.git&lt;/code&gt; ，找到无后缀名文档 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config&lt;/code&gt; ，打开。
在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[remote &quot;origin&quot;]&lt;/code&gt; （取决于你的本地分支名称） 下，找到 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;url&lt;/code&gt; 。&lt;/p&gt;

&lt;p&gt;里面原本的内容应该是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https://github.com/所有者名称/项目名称.git&lt;/code&gt; , 改成下述形式即可： &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https://推送者名称@github.com/所有者名称/项目名称.git&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;再次 push ，成功。收工睡觉喽——&lt;/p&gt;
</description>
        <pubDate>Mon, 25 Mar 2024 09:33:00 +0800</pubDate>
        <link>http://localhost:4000/%E5%92%A9%E7%8B%BC%E5%8D%9A%E5%AE%A2/%E6%8A%98%E8%85%BE/2024/03/25/git_remote_error.html</link>
        <guid isPermaLink="true">http://localhost:4000/%E5%92%A9%E7%8B%BC%E5%8D%9A%E5%AE%A2/%E6%8A%98%E8%85%BE/2024/03/25/git_remote_error.html</guid>
        
        <category>技术</category>
        
        <category>Git</category>
        
        
        <category>咩狼博客</category>
        
        <category>折腾</category>
        
      </item>
    
  </channel>
</rss>
